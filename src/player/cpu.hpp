#pragma once

#include "../piece.hpp"
#include "../move.hpp"
#include "../game.hpp"
#include "player.hpp"

#define P_VAL 100
#define N_VAL 305
#define B_VAL 333
#define R_VAL 563
#define Q_VAL 950
#define K_VAL 0.0//1E4

#define MIN -10000//(std::numeric_limits<double>::lowest())
#define MAX 10000//(std::numeric_limits<double>::max())

#define WEIGHT 1

struct MoveEval {
    Move move;
    double eval;
};


class CPU : public Player {
    Move get_move(const Game &);
    void print_player_type();
};

MoveEval evaluate_depth(Game &, int, double, double);
double evaluate_piece(piece_t, int, int);

double evaluate_board(const Game &);

bool is_endgame(const Game &);

const double board_weights[][BOARD_SIZE][BOARD_SIZE] = {
                        //Filler
                        {{}},
                        //king middle game
                        {{-30,-40,-40,-50,-50,-40,-40,-30},
                        {-30,-40,-40,-50,-50,-40,-40,-30},
                        {-30,-40,-40,-50,-50,-40,-40,-30},
                        {-30,-40,-40,-50,-50,-40,-40,-30},
                        {-20,-30,-30,-40,-40,-30,-30,-20},
                        {-10,-20,-20,-20,-20,-20,-20,-10},
                        {20, 20,  0,  0,  0,  0, 20, 20},
                        {20, 30, 10,  0,  0, 10, 30, 20}},
                        //queen
                        {{-20,-10,-10, -5, -5,-10,-10,-20},
                        {-10,  0,  0,  0,  0,  0,  0,-10},
                        {-10,  0,  5,  5,  5,  5,  0,-10},
                        {-5,  0,  5,  5,  5,  5,  0, -5},
                        {0,  0,  5,  5,  5,  5,  0, -5},
                        {-10,  5,  5,  5,  5,  5,  0,-10},
                        {-10,  0,  5,  0,  0,  0,  0,-10},
                        {-20,-10,-10, -5, -5,-10,-10,-20}},
                        // rook
                        {{0,  0,  0,  0,  0,  0,  0,  0},
                        {5, 10, 10, 10, 10, 10, 10,  5},
                        {-5,  0,  0,  0,  0,  0,  0, -5},
                        {-5,  0,  0,  0,  0,  0,  0, -5},
                        {-5,  0,  0,  0,  0,  0,  0, -5},
                        {-5,  0,  0,  0,  0,  0,  0, -5},
                        {-5,  0,  0,  0,  0,  0,  0, -5},
                        {0,  0,  0,  5,  5,  0,  0,  0}},
                        // bishop
                        {{-20,-10,-10,-10,-10,-10,-10,-20},
                        {-10,  0,  0,  0,  0,  0,  0,-10},
                        {-10,  0,  5, 10, 10,  5,  0,-10},
                        {-10,  5,  5, 10, 10,  5,  5,-10},
                        {-10,  0, 10, 10, 10, 10,  0,-10},
                        {-10, 10, 10, 10, 10, 10, 10,-10},
                        {-10,  5,  0,  0,  0,  0,  5,-10},
                        {-20,-10,-10,-10,-10,-10,-10,-20}},
                        //Knight
                        {{-50,-40,-30,-30,-30,-30,-40,-50},
                        {-40,-20,  0,  0,  0,  0,-20,-40},
                        {-30,  0, 10, 15, 15, 10,  0,-30},
                        {-30,  5, 15, 20, 20, 15,  5,-30},
                        {-30,  0, 15, 20, 20, 15,  0,-30},
                        {-30,  5, 10, 15, 15, 10,  5,-30},
                        {-40,-20,  0,  5,  5,  0,-20,-40},
                        {-50,-40,-30,-30,-30,-30,-40,-50}},
                        //Pawn
                        {{0,  0,  0,  0,  0,  0,  0,  0},
                        {50, 50, 50, 50, 50, 50, 50, 50},
                        {10, 10, 20, 30, 30, 20, 10, 10},
                        {5,  5, 10, 25, 25, 10,  5,  5},
                        {0,  0,  0, 25, 25,  0,  0,  0},
                        {5, -5,-10,  0,  0,-10, -5,  5},
                        {5, 10, 10,-20,-20, 10, 10,  5},
                        {0,  0,  0,  0,  0,  0,  0,  0}},
                    };